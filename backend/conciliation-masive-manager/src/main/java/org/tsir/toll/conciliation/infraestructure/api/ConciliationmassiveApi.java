/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.tsir.toll.conciliation.infraestructure.api;

import org.tsir.common.api.ApiMessage;
import org.tsir.toll.conciliation.domain.dto.DacTicketDTO;
import org.tsir.toll.conciliation.domain.dto.DetailTicketConcDTO;
import org.tsir.toll.conciliation.domain.dto.DetailTicketDTO;
import org.tsir.toll.conciliation.domain.dto.InfoTablesDTO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-09-15T14:06:41.091Z[GMT]")
@Validated
public interface ConciliationmassiveApi {

	@Operation(summary = "Consultar DAc´s y tiquetes disponibles", description = "Realiza la busqueda DAC´s y tiquetes disponibles", tags = {
			"conciliationmassive" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DacTicketDTO.class)))),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/conciliationmassive", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<DacTicketDTO>> getDACTicket(
			@Parameter(in = ParameterIn.QUERY, description = "Llaves y valores de los criterios de búsqueda.  Enumeración de las posibles llaves:  * `DATECOLLECTION` - Fecha de recaudo.  * `LANEID` - Id de carril.  * `TURNCODE` - Código de turno. ", schema = @Schema()) @Valid @RequestParam(value = "filter", required = false) Map<String, String> mapFilter);


    @Operation(summary = "Conciliar masivamente", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "massiveconciliation" })
        @ApiResponses(value = { 
            @ApiResponse(responseCode = "200", description = "Conciliación masiva realizada correctamente"),
            
            @ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
        @RequestMapping(value = "/conciliationmassive",
            produces = { "application/json" }, 
            method = RequestMethod.POST)
        ResponseEntity<Void> postReconcileMassive(@Parameter(in = ParameterIn.QUERY, description = "Llaves y valores de los criterios de búsqueda.  Enumeración de las posibles llaves:  * `TOLL` - ID de la Estación.  * `LANE` - Codigo del carril.  * `TURN` - Codigo del turno.  * `DATE` - Fecha de recaudo.  * `CATEGORY` - Código dela categoría. " ,schema=@Schema()) @Valid @RequestParam(value = "filter", required = false) Map<String, String> filter);

	
	@Operation(summary = "Consultar Campos de tablas", description = "Consulta las conciliaciones por fecha de recaudo, estación, carril, turno, fecha de recaudo y id conciliación", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "conciliación" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = InfoTablesDTO.class)))),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/reconcile", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<InfoTablesDTO>> getInfoTables(
			@Parameter(in = ParameterIn.QUERY, description = "Llaves y valores de los criterios de búsqueda.  Enumeración de las posibles llaves:  * `DATECOLLECTION` - Fecha de recaudo.  * `LANEID` - Número de carril.  * `TURNCODE` - Número de turno.  ", schema = @Schema()) @Valid @RequestParam(value = "filter", required = false) String String);


	

	
	
	
	@Operation(summary = "Conciliar masivamente", description = "", security = {
	        @SecurityRequirement(name = "bearerAuth")    }, tags={ "conciliationmassive" })
	    @ApiResponses(value = { 
	        @ApiResponse(responseCode = "200", description = "Conciliación masiva realizada correctamente"),
	        
	        @ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	    @RequestMapping(value = "/conciliationmassive",
	        produces = { "application/json" }, 
	        consumes = { "application/json" }, 
	        method = RequestMethod.PUT)
	    ResponseEntity<Void> putReconcileMassive(@Parameter(in = ParameterIn.DEFAULT, description = "Objeto necesario para conciliar masivamente", required=true, schema=@Schema()) @Valid @RequestBody DetailTicketConcDTO body);





}
